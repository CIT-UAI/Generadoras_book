install.packages("AHPhybrid")
devtools::install_github("gluc/ahp", build_vignettes = TRUE)
library(ahp)
criteria <- c("Disponibilidad de viento", "Accesibilidad", "Impacto ambiental", "Costo")
comparison_matrix <- rbind(
c(1, 3, 5, 7),
c(1/3, 1, 3, 5),
c(1/5, 1/3, 1, 1/3),
c(1/7, 1/5, 3, 1)
)
weights <- ahp(comparison_matrix)$weights
read.csv("data/tablas/variables.csv")
read.csv("data/tablas/variables.csv", sep = ";")
read.csv("data/tablas/variables.csv", sep = ";", encoding = "UTF-8")
read.csv("data/tablas/variables.csv", sep = ";", encoding = "UTF-8")
read.csv("data/tablas/variables.csv", sep = ";", encoding = "UTF-8")
read.csv("data/tablas/variables.csv", sep = ";", encoding = "latin-1",
header = T)
read.csv("data/tablas/variables.csv", sep = ";", encoding = "latin-1",
header = T)
read.csv("data/tablas/variables.csv", sep = ";", encoding = "UTF-(",
header = T)
read.csv("data/tablas/variables.csv", sep = ";", encoding = "UTF-8",
header = T)
read.csv("data/tablas/variables.csv", sep = ";", encoding = "UTF-8",
header = T)
read.csv("data/tablas/variables.csv", sep = ";", encoding = "latin-1",
header = T)
library(knitr)
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
## Participación Expertos
## Participación con Empresas
## Parcipación Actores Claves y la Comunidad
knitr::opts_chunk$set(echo = FALSE)
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(knitr))
suppressPackageStartupMessages(library(kableExtra))
suppressPackageStartupMessages(library(mapview))
escala <-  read.csv("data/tablas/escalas_Saaty.csv", sep = ";", encoding = "latin-1", header = T)
escala <-  read.csv("data/tablas/escalas_Saaty.csv", sep = ";", encoding = "latin-1", header = T)
escala
inserttable:::insert_table()
#| label: tbl-ia
#| tbl-cap: Escala fundamental, de acuerdo con Saaty.
ia = c(0,   0, 0.52, 0.89, 1.11, 1.25, 1.35, 1.4, 1.45, 1.49, 1.52, 1.54)
my_tbl <- as.data.frame(ia)
my_tbl
my_tbl <- as.data.frame(n = 1:12,ia)
my_tbl
my_tbl <- as.data.frame(n = 1:12,ia)
my_tbl
my_tbl <- data.frame(n = 1:12, ia)
my_tbl
my_tbl <- data.frame(n = 1:12, ia) %>% t()
my_tbl
kable_styling(
kable(my_tbl,  row.names = FALSE, align = "c",
caption = NULL, format = "html"),
bootstrap_options = c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
my_tbl%>% mutate(n =as.character(n)) %>%
kable(row.names = FALSE,
align = "c", caption = NULL,
format = "html") %>%
kable_styling(
bootstrap_options =
c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
#| label: tbl-ia
#| tbl-cap: Escala fundamental, de acuerdo con Saaty.
ia = c(0,   0, 0.52, 0.89, 1.11, 1.25, 1.35, 1.4, 1.45, 1.49, 1.52, 1.54)
my_tbl <- data.frame(n = 1:12,
ia) %>% t()
require(knitr)
require(kableExtra)
my_tbl%>% mutate(n =as.character(n)) %>%
kable(row.names = FALSE,
align = "c", caption = NULL,
format = "html") %>%
kable_styling(
bootstrap_options =
c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
my_tbl%>% t() %>%
mutate(n =as.character(n)) %>%
kable(row.names = FALSE,
align = "c", caption = NULL,
format = "html") %>%
kable_styling(
bootstrap_options =
c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
my_tbl <- data.frame(n = 1:12,
ia)
require(knitr)
my_tbl%>% t() %>%
mutate(n =as.character(n)) %>%
kable(row.names = FALSE,
align = "c", caption = NULL,
format = "html") %>%
kable_styling(
bootstrap_options =
c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
my_tbl%>% t()
my_tbl%>%
mutate(n =as.character(n)) %>%
t() %>%
kable(row.names = FALSE,
align = "c", caption = NULL,
format = "html") %>%
kable_styling(
bootstrap_options =
c("striped", "hover", "condensed"),
position = "center", full_width = FALSE)
saveRDS(IA, "data/rds/IA.rds")
saveRDS(IA, "data/rds/IA.rds")
IA<- data.frame(n = 1:12,
ia)
saveRDS(IA, "data/rds/IA.rds")
require(knitr)
require(kableExtra)
# Definir una matriz A
A <- matrix(c(2,1,-1,0,2,1,0,1,2), nrow = 3, ncol = 3)
A
# Definir una matriz A
A <- matrix(c(1,1,-1,0,1,1,0,1,1), nrow = 3, ncol = 3)
A
# Encontrar los valores y vectores propios de la matriz A
eigen_decomp <- eigen(A)
eigen_decomp
# Imprimir los vectores propios
eigen_decomp$vectors
# Imprimir los valores propios
eigen_decomp$values
# Imprimir los valores propios
eigen_decomp$values * A
# Imprimir los vectores propios
eigen_decomp$vectors
# Imprimir los valores propios
eigen_decomp$values %*% A
# Imprimir los valores propios
eigen_decomp$values %*% A
# Imprimir los vectores propios
eigen_decomp$vectors %*%eigen_decomp$values
escala <-  read.csv("data/tablas/escalas_Saaty.csv", sep = ";", encoding = "latin-1", header = T)
escala
1/2
# Definir una matriz A
A <- matrix(c(1,2,6,1/2,1,3,1/6,1/3,1), nrow = 3, ncol = 3)
A
# Definir una matriz A
A <- matrix(c(1,2,6,1/2,1,3,1/6,1/3,1), nrow = 3, ncol = 3, byrow = T)
A
# Encontrar los valores y vectores propios de la matriz A
eigen_decomp <- eigen(A)
eigen_decomp
# Imprimir los valores propios
eigen_decomp$values
# Imprimir los vectores propios
eigen_decomp$vectors
eigen_decomp$vectors[1,]
eigen_decomp$vectors[1,] %>% mean()
library(dplyr)
eigen_decomp$vectors[1,] %>% mean()
6/10
3/10
eigen_decomp$vectors[,1] %>% mean()
# Imprimir los valores propios
eigen_decomp$values
# Definir una matriz A
A <- matrix(c(1, 7, 5, 1/3,
1/7,1, 1/3, 1/9,
1/5, 3,1,1/7,
3,9,7,1), nrow = 3, ncol = 3, byrow = T)
# Definir una matriz A
A <- matrix(c(1, 7, 5, 1/3,
1/7,1, 1/3, 1/9,
1/5, 3,1,1/7,
3,9,7,1), nrow = 4, ncol = 4, byrow = T)
A
colSums(A)
# Normalizacion de la Matriz
normalize_matrix <- function(matrix) {
return (matrix / colSums(matrix))
}
normalize_matrix(A)
col_sums <- purrr::map_dbl(matrix, sum)
col_sums <- purrr::map_dbl(A, sum)
normalize_matrix_functional(A)
normalize_matrix_functional <- function(matrix) {
col_sums <- purrr::map_dbl(matrix, sum)
return (matrix / col_sums)
}
normalize_matrix_functional(A)
matrix
mat <-  A
col_sums <- purrr::map_dbl(mat, sum)
col_sums
A%*% diag(1/colSums(A)),
A%*% diag(1/colSums(A))
# Normalizacion de la Matriz
function(matriz){
return(matriz %*% diag(1/colSums(matriz)))
}
A_n <-
# Normalizacion de la Matriz
normalize_matrix <- function(matriz){
return(matriz %*% diag(1/colSums(matriz)))
}
A_n <- normalize_matrix(A)
A_n
# Encontrar los valores y vectores propios de la matriz A
eigen_decomp <- eigen(A_n)
eigen_decomp
# Imprimir los valores propios
eigen_decomp$values
# Imprimir los vectores propios
eigen_decomp$vectors
# Imprimir los valores propios
eigen_decomp$values
diag(1/colSums(A)
)
t(A)
A
t(A)/colSums(A)
# Vector de Pesos
rowMeans(A_n)
# Encontrar los valores y vectores propios de la matriz A
eigen_decomp <- eigen(A_n)
# Imprimir los valores propios
eigen_decomp$values
# Imprimir los vectores propios
eigen_decomp$vectors
w
# Vector de Pesos (ponderacion de Criterios)
w <- rowMeans(A_n)
w
An %*% w
A_n %*% w
A %*% w
sum_Axw <-  sum(Axw)
sum_Axw
# Multiplicacion Matricial a por w
Axw <-  A %*% w
sum_Axw <-  sum(Axw)
sum_Axw
# Imprimir los valores propios
eigen_decomp$values
max(eigen_decomp$values)
max(eigen_decomp$vectors)
eigen_decomp$vectors
# Encontrar los valores y vectores propios de la matriz A
eigen_decomp <- eigen(A)
eigen_decomp
# Imprimir los valores propios
eigen_decomp$values
max(eigen(A)$values)
eigenvalues = eigen(A)$values
eigenvalues
max(Re(eigenvalues[abs(Im(eigenvalues)) < 1e-6]))
sum_Axw
eigenvalues = eigen(A)
max(abs(eigenvalues$values))
sum_Axw
# Función para calcular el vector propio utilizando el método de potencias
potencias <- function(A, x0, tol, maxiter) {
n <- length(x0)
x <- x0/norm(x0)
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
}
A
# Ejemplo de uso
x0 <- c(1, 1)
resultados <- potencias(A, x0, 1e-6, 100)
A
A %>% as.numeric()
m
m
n= 4
m <- matrix(c(1, 5, 5, 7,
1/5,1, 1, 3,
1/5, 1,1,3,
1/7, 1/3,1/3,1),
nrow = n, ncol = n, byrow = T)
resultados <- potencias(m, x0, 1e-6, 100)
# Ejemplo de uso
x0 <- c(1, 1)
n <- length(x0)
x <- x0/norm(x0)
x
x <- x0/norm(x0)
n <- length(x0)
# Ejemplo de uso
x0 <- c(1, 1)
x0
n <- length(x0)
x <- x0/norm(x0)
norm(x0)
# Función para calcular el vector propio utilizando el método de potencias
potencias <- function(A, x0, tol, maxiter) {
n <- length(x0)
x <- x0/norm(x0)
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
}
# Ejemplo de uso
A <- matrix(c(2, 1, 1, 2), ncol = 2)
x0 <- c(1, 1)
resultados <- potencias(A, x0, 1e-6, 100)
# Función para calcular el vector propio utilizando el método de potencias
potencias <- function(A, x0, tol, maxiter) {
n <- length(x0)
x <- matrix(x0/norm(x0), ncol = 1)
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
}
# Ejemplo de uso
A <- matrix(c(2, 1, 1, 2), ncol = 2)
x0 <- c(1, 1)
resultados <- potencias(A, x0, 1e-6, 100)
# Ejemplo de uso
A <- matrix(c(2, 1, 1, 2), ncol = 2)
x0 <- c(1, 1)
resultados <- potencias(A, x0, 1e-6, 100)
n <- length(x0)
x <- matrix(x0/norm(x0), ncol = 1)
# Función para calcular el vector propio utilizando el método de potencias
potencias <- function(A, x0, tol, maxiter) {
n <- length(x0)
x <- matrix(x0/norm(x0), ncol = 1)
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
}
# Ejemplo de uso
A <- matrix(c(2, 1, 1, 2), ncol = 2)
x0 <- c(1, 1)
resultados <- potencias(A, x0, 1e-6, 100)
norm(x0
)
norm(1)
x <- matrix(x0/norm(x0, type = 1), ncol = 1)
(x1 <- cbind(1, 1:10))
norm(x1)
x0
rnorm(1)
rnorm(1,1)
rnorm(c(1, 1)
)
norm(x0)
x0 <- c(2, 1)
x0 <- c(2, 1)
x0
# Ejemplo de uso
A <- matrix(c(2, 1, 1, 2), ncol = 2)
x0 <- c(2, 1)
resultados <- potencias(A, x0, 1e-6, 100)
x <- matrix(x0/norm(x0), ncol = 1)
?norm
x <- norm(matrix(x0/norm(x0), ncol = 1))
x0/norm(matrix(x0, ncol = 1)
x <- matrix(x0/norm(x0), ncol = 1)
x0/norm(matrix(x0, ncol = 1))
# Función para calcular el vector propio utilizando el método de potencias
potencias <- function(A, x0, tol, maxiter) {
n <- length(x0)
x <- x0/norm(matrix(x0, ncol = 1))
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
}
# Ejemplo de uso
A <- matrix(c(2, 1, 1, 2), ncol = 2)
x0 <- c(2, 1)
resultados <- potencias(A, x0, 1e-6, 100)
resultados
x0/norm(matrix(x0, ncol = 1))
n= 4
m <- matrix(c(1, 5, 5, 7,
1/5,1, 1, 3,
1/5, 1,1,3,
1/7, 1/3,1/3,1),
nrow = n, ncol = n, byrow = T)
resultados <- potencias(m, x0, 1e-6, 100)
# Función para calcular el vector propio utilizando el método de potencias
potencias <- function(A, x0, tol, maxiter) {
n <- length(x0)
x <- x0/norm(x0)
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
}
resultados <- potencias(m, x0, 1e-6, 100)
m
resultados <- potencias(A= m, x0, 1e-6, 100)
A= m
x0 <- c(1, 1)
resultados <- potencias(A= m, x0, 1e-6, 100)
n <- length(x0)
n
x <- x0/norm(matrix(x0, ncol = 1))
x
k <- 0
maxiter = 100
tol=1e-6
tol
k <- k + 1
k
y <- A %*% x
A
x
A
# Ejemplo de uso
A <- matrix(c(2, 1, 1, 2), ncol = 2)
dim(A)
x0 <- rep(1)
x0
x0 <- rep(1, 4)
x0
x0 <- rep(1, 4)
resultados <- potencias(A= m, x0, 1e-6, 100)
A= m
k <- k + 1
y <- A %*% x
A
x
x <- x0/norm(matrix(x0, ncol = 1))
x
y <- A %*% x
y
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
n <- length(x0)
x <- x0/norm(matrix(x0, ncol = 1))
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
# Función para calcular el vector propio utilizando el método de potencias
potencias <- function(A, x0, tol, maxiter) {
n <- length(x0)
x <- x0/norm(matrix(x0, ncol = 1))
k <- 0
while (k < maxiter) {
k <- k + 1
y <- A %*% x
lambda <- sum(y * x)
x <- y/norm(y)
if (abs(lambda - sum(y * x)) < tol) break
}
list(x = x, lambda = lambda)
}
resultados <- potencias(A= m, x0, 1e-6, 100)
w <- resultados$x
w
n =4
x0 <- rep(1, n)
resultados <- potencias(A= m, x0, 1e-6, 100)
w <- resultados$x
w
resultados
